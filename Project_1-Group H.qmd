---
title: "ST 558 Project 1 - Group H"
subtitle: "Jie Chen & Lee Worthington"
format: 
  html:
    embed-resources: true
editor: visual
editor_options: 
  chunk_output_type: inline
---

## Setup environment

```{r}
#| warning: FALSE
#| message: FALSE

library(readr)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tools)
```

## Data Processing

### Processing steps

```{r}
#| warning: FALSE
#| message: FALSE

# Step 1 - Read in one section of the data 
EDU01a_part <- read_csv("EDU01a.csv") |>
   select(Area_name, STCOU, ends_with("D")) |>
   rename(area_name = Area_name) |>
  
  # Step 2 - Covert into long format
  pivot_longer(cols = 3:12,
               names_to = "census_field",
               values_to = "value") |>
  
  # Step 3 - pull out the year and convert the year into a numeric value, create a new variable with first 3 char and following 4 digits
  mutate(year = ifelse(as.numeric(substr(census_field, 8, 9)) > 25, 
                       as.numeric(substr(census_field, 8, 9)) + 1900, as.numeric(substr(census_field, 8, 9)) + 2000),
        measurement = substr(census_field, 1, 7)) |>
  collect()

# Step 4 - create two data sets with only non-county data/ only county level data
county_matching <- grep(pattern = ", \\w\\w", EDU01a_part$area_name) 
county <- EDU01a_part[county_matching,]
non_county <- EDU01a_part[-county_matching,]
  
# Step 4 - add a class to the county_only data called county
class(county) <-c("county", class(county))

# Step 4 - add a class to the non-county level data called state
class(non_county) <-c("state", class(non_county))

# Step 5 - create a new variable describe the state
county <-county |> 
  mutate(state = substr(area_name, nchar(county$area_name)-1, nchar(area_name)))

# Step 6 - non-county, Define lists of divisions
new_england <- c("Connecticut", "Maine", "Massachusetts", "New Hampshire", "Rhode Island", "Vermont")
middle_atlantic <- c("New Jersey", "New York", "Pennsylvania")
east_north_central <- c("Illinois", "Indiana", "Michigan", "Ohio", "Wisconsin")
west_north_central <- c("Iowa", "Kansas", "Minnesota", "Missouri", "Nebraska", "North Dakota", "South Dakota")
south_atlantic <- c("Delaware", "Florida", "Georgia", "Maryland", "North Carolina", "South Carolina", "Virginia", "Washington, D.C.", "West Virginia")
east_south_central <- c("Alabama", "Kentucky", "Mississippi", "Tennessee")
west_south_central <- c("Arkansas", "Louisiana", "Oklahoma", "Texas")
mountain <- c("Arizona", "Colorado", "Idaho", "Montana", "Nevada", "New Mexico", "Utah", "Wyoming")
pacific <- c("Alaska", "California", "Hawaii", "Oregon", "Washington")

# Step 6 - Convert the lists to uppercase
new_england <- toupper(new_england)
middle_atlantic <- toupper(middle_atlantic)
east_north_central <- toupper(east_north_central)
west_north_central <- toupper(west_north_central)
south_atlantic <- toupper(south_atlantic)
east_south_central <- toupper(east_south_central)
west_south_central <- toupper(west_south_central)
mountain <- toupper(mountain)
pacific <- toupper(pacific)

# Step 6 - Create a new variable called "division"
non_county <- non_county |>
  mutate(division = case_when(
    toupper(area_name) %in% new_england ~ "New England",
    toupper(area_name) %in% middle_atlantic ~ "Middle Atlantic",
    toupper(area_name) %in% east_north_central ~ "East North Central",
    toupper(area_name) %in% west_north_central ~ "West North Central",
    toupper(area_name) %in% south_atlantic ~ "South Atlantic",
    toupper(area_name) %in% east_south_central ~ "East South Central",
    toupper(area_name) %in% west_south_central ~ "West South Central",
    toupper(area_name) %in% mountain ~ "Mountain",
    toupper(area_name) %in% pacific ~ "Pacific",
    TRUE ~ "ERROR"
  ))

```

### Functions for all data processing steps

#### Steps 1 & 2 function - format all data

```{r}
#| warning: FALSE
#| message: FALSE

# create function with the file path and specified column as inputs
process_data_step_1_2 <- function(df, values_column_name = "value"){
  
  # load input data
  step_1_2_output <- df |>
  
    # select specified columns
    select(Area_name, STCOU, ends_with("D")) |>
    
    # rename Area_Name
    rename(area_name = Area_name) |>
    
    # put the columns ending in D in long format, under "enrollment"
    pivot_longer(cols = 3:12, names_to = "census_field", values_to = values_column_name)
  
  # store values_column_name name for later functions
  attr(step_1_2_output, "values_column_name") <- values_column_name
  
  # return output
  return(step_1_2_output)
}
```

#### Step 3 function - extract year for all data

```{r}
#| warning: FALSE
#| message: FALSE

# create function to extract year and measurements
process_data_step_3 <- function(df){
  
  # load input data
  step_3_output <- df |>
    
    # Extract the year and measurement
    mutate(
      
      # extract year from the last 2 digits, add 1900 or 2000 to return a proper value
      year = ifelse(as.numeric(substr(get("census_field"), 8, 9))>25, 
                    as.numeric(substr(get("census_field"), 8, 9))+1900, 
                    as.numeric(substr(get("census_field"), 8, 9))+2000),
      
      # grab measurement value from the first 7 characters
      measurement = substr(get("census_field"), 1, 7)
    )
  
  # return output
  return(step_3_output)
}
```

#### Step 5 function - determine state for county data

```{r}
#| warning: FALSE
#| message: FALSE

# function to determine state for COUNTY data
process_data_step_5 <- function(df){
  
  # load input data
  step_5_output <- df |>
    
    # create a new field with the state
    mutate(state = substr(area_name, nchar(area_name)-1, nchar(area_name)))
    
  # return output
  return(step_5_output)
}
```

#### Step 6 function - determine division for non-county data

```{r}
#| warning: FALSE
#| message: FALSE

# function to determine classification for NON-COUNTY data
process_data_step_6 <- function(df){
  
  # define divisions and uppercase everything
  new_england <- toupper(c("Connecticut", "Maine", "Massachusetts", "New Hampshire", "Rhode Island", "Vermont"))
  middle_atlantic <- toupper(c("New Jersey", "New York", "Pennsylvania"))
  east_north_central <- toupper(c("Illinois", "Indiana", "Michigan", "Ohio", "Wisconsin"))
  west_north_central <- toupper(c("Iowa", "Kansas", "Minnesota", "Missouri", "Nebraska", "North Dakota", "South Dakota"))
  south_atlantic <- toupper(c("Delaware", "Florida", "Georgia", "Maryland", "North Carolina", "South Carolina", "Virginia", "Washington, D.C.", "West Virginia"))
  east_south_central <- toupper(c("Alabama", "Kentucky", "Mississippi", "Tennessee"))
  west_south_central <- toupper(c("Arkansas", "Louisiana", "Oklahoma", "Texas"))
  mountain <- toupper(c("Arizona", "Colorado", "Idaho", "Montana", "Nevada", "New Mexico", "Utah", "Wyoming"))
  pacific <- toupper(c("Alaska", "California", "Hawaii", "Oregon", "Washington"))
  
  # load input data
  step_6_output <- df |>
    # assign divisions
    mutate(
      # uppercase everything so it matches the keys
      area_name_upper = toupper(area_name),
      # assign divisions 
      division = case_when(
        area_name %in% new_england ~ "New England",
        area_name %in% middle_atlantic ~ "Middle Atlantic",
        area_name %in% east_north_central ~ "East North Central",
        area_name %in% west_north_central ~ "West North Central",
        area_name %in% south_atlantic ~ "South Atlantic",
        area_name %in% east_south_central ~ "East South Central",
        area_name %in% west_south_central ~ "West South Central",
        area_name %in% mountain ~ "Mountain",
        area_name %in% pacific ~ "Pacific",
        TRUE ~ "ERROR"
    )) |>
    # get rid of the new upper field
    select(-area_name_upper)
    
  # return output
  return(step_6_output)
}
```

#### Step 4, 5, and 6 function - combine previous functions

```{r}
#| warning: FALSE
#| message: FALSE

# create function to extract year and measurements
process_data_step_4_5_6 <- function(df){
  
  # create county data
  county_matching <- grep(pattern = ", \\w\\w", df$area_name) 
  county <- df[county_matching,]
   
  # create non-county data
  non_county <- df[-county_matching,]
  
  # Step 4 - add a class to the county_only data called county
  class(county) <- c("county",class(county))
  
  # Step 4 - add a class to the non-county level data called state
  class(non_county) <- c("state",class(non_county))

  # Step 5 - apply county function
  county_processed <- process_data_step_5(df = county)
  
  # Step 6 - apply non-county function
  non_county_processed <- process_data_step_6(df = non_county)
  
  # return new tibbles as a list
  return(list(county = county_processed, non_county = non_county_processed))
}
```

#### Wrapper function - run all preprocessing steps

```{r}
#| warning: FALSE
#| message: FALSE

process_all_data <- function(file_path, values_column_name = "value"){
  
  # load data
  result <- read_csv(file_path) |>
    
    # select fields, transform data
    process_data_step_1_2(values_column_name = values_column_name) |>
    
    # extract year and measurement
    process_data_step_3() |>
    
    # split data, determine state for non-county data, class for county data
    process_data_step_4_5_6()
  
  # return results
  return(result)
}

# call function and output
EDU01a_part <- process_all_data(file_path = "EDU01a.csv", values_column_name = "Enrollment")
EDU01b_part <- process_all_data(file_path = "EDU01b.csv", values_column_name = "Enrollment")
```

#### Combine data function

```{r}
#| warning: FALSE
#| message: FALSE

# create function to combine data
combine_processed_data <- function(df1, df2){
  
  # combine county data
  combined_county <- bind_rows(df1$county, df2$county)
  
  # combine non-county data
  combined_non_county <- bind_rows(df1$non_county, df2$non_county)
  
  # combine to a list
  combined_data <- list(county = combined_county, non_county = combined_non_county)
  
  # return results
  return(combined_data)
}

# call function and combine data
combined_processed_data <- combine_processed_data(EDU01a_part, EDU01b_part)

# print results
str(combined_processed_data)
```

## Generic Functions for Summarizing

#### State plot function

```{r}
#| warning: FALSE
#| message: FALSE

# create function for plotting for state
plot.state <- function(df, values_column_name = "value"){
  
  # Calculate the mean for each division and year
  summarize_df <- df |>
    
    # Remove observations with "ERROR" in Division
    filter(division != "ERROR") |> 
    
    # group by division and yer 
    group_by(division, year) |> 
    
    # calculate the mean across the years for each Division
    summarize(mean_value = mean(get(values_column_name), na.rm = TRUE), .groups = 'drop')

  # Create the plot
  p <- ggplot(summarize_df, aes(x = year, y = mean_value, color = division, group = division)) +
    geom_line() +
    labs(
      title = paste(values_column_name, "Mean by Year and Division"),
      x = "Year",
      y = paste(values_column_name, "Mean")
    ) +
    theme_minimal()
  
  # return results
  return(p)
}

# test the plot
plot.state(combined_processed_data$non_county, values_column_name = "Enrollment")
```

#### County plot function

```{r}
#| warning: FALSE
#| message: FALSE

# create function for plotting county
plot.county <- function(df, state_of_interest = "AL", values_column_name = "value", top_or_bottom = "top", num_counties = 5){
  
  # case inputs
  top_or_bottom <- tolower(top_or_bottom)
  state_of_interest <- toupper(state_of_interest)
  var_name <- tolower(values_column_name)
  
  # warning on invalid inputs
  if (!(top_or_bottom %in% c("top", "bottom"))) {
    warning("Invalid value for 'top_or_bottom'. Defaulting to 'top'.")
    top_or_bottom <- "top"
  }
  
  # Filter the data to only include the specified state without quotes
  state_data <- df |>
    filter(state == !!state_of_interest)
  
  # Calculate the overall mean of the statistic for each Area_name and sort
  area_means <- state_data |>
    group_by(area_name) |>
    summarize(mean_value = mean(.data[[values_column_name]], na.rm = TRUE), .groups = 'drop') |>
    arrange(if (top_or_bottom == "top") desc(mean_value) else mean_value)
  
  # Obtain the top or bottom x number of Area_names
  selected_areas <- area_means |>
    slice_head(n = num_counties) |>
    pull(area_name)
  
  # Filter the data for the specified state and selected Area_names
  plot_data <- state_data |>
    filter(area_name %in% selected_areas)
  
  # Create the plot
  p <- ggplot(plot_data, aes(x = year, y = .data[[values_column_name]], color = area_name, group = area_name)) +
    geom_line() +
    labs(
      title = paste(values_column_name, "Total by Year for", toTitleCase(top_or_bottom), num_counties, "Counties in", state_of_interest),
      x = "Year",
      y = paste(values_column_name)
    ) +
    theme_minimal()
  
  # return results
  return(p)
}

# Test plot
plot.county(combined_processed_data$county,
            state_of_interest = "AL", 
            values_column_name = "Enrollment", 
            top_or_bottom = "top", 
            num_counties = 10)
```

## Put everything together

### Plots for previous enrollment data

```{r}
#| warning: FALSE
#| message: FALSE

# preprocess data
EDU01a_part <- process_all_data(file_path = "https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv", values_column_name = "Enrollment")
EDU01b_part <- process_all_data(file_path = "https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv", values_column_name = "Enrollment")

# combine processed data
combined_processed_data <- combine_processed_data(EDU01a_part, EDU01b_part)

# plot state
plot.state(combined_processed_data$non_county, values_column_name = "Enrollment")

# plot.county state NC top 20
plot.county(combined_processed_data$county,
            state_of_interest = "NC", 
            values_column_name = "Enrollment", 
            top_or_bottom = "top", 
            num_counties = 20)

# plot.county state SC bottom 7
plot.county(combined_processed_data$county,
            state_of_interest = "SC", 
            values_column_name = "Enrollment", 
            top_or_bottom = "bottom", 
            num_counties = 7)

# plot.county state defaults
plot.county(combined_processed_data$county,
            values_column_name = "Enrollment") # doc mentioned in a comment this was fine

# plot.county state PA top 8
plot.county(
  combined_processed_data$county,
  state_of_interest = "PA", 
  values_column_name = "Enrollment", 
  top_or_bottom = "top", 
  num_counties = 8
)
```

### Plots for new population data

```{r}
#| warning: FALSE
#| message: FALSE

# preprocess data
PST01a_part <- process_all_data(file_path = "https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv", values_column_name = "Population")
PST01b_part <- process_all_data(file_path = "https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv", values_column_name = "Population")
PST01c_part <- process_all_data(file_path = "https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv", values_column_name = "Population")
PST01d_part <- process_all_data(file_path = "https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv", values_column_name = "Population")

# combine processed data
combined_processed_data <- combine_processed_data(PST01a_part, PST01b_part)
combined_processed_data <- combine_processed_data(combined_processed_data, PST01c_part)
combined_processed_data <- combine_processed_data(combined_processed_data, PST01d_part)

# plot state
plot.state(combined_processed_data$non_county, 
           values_column_name = "Population")

# plot.county CA top 15
plot.county(combined_processed_data$county,
            state_of_interest = "CA", 
            values_column_name = "Population", 
            top_or_bottom = "top", 
            num_counties = 15)

# plot.county state TX top 4
plot.county(combined_processed_data$county,
            state_of_interest = "TX", 
            values_column_name = "Population", 
            top_or_bottom = "top", 
            num_counties = 4)

# plot.county defaults
plot.county(combined_processed_data$county, 
            values_column_name = "Population") # doc made a comment that specifying the field to plot here is fine

# plot.county state NY top 10
plot.county(combined_processed_data$county,
            state_of_interest = "NY", 
            values_column_name = "Population", 
            top_or_bottom = "top", 
            num_counties = 10)
```
