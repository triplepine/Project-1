[
  {
    "objectID": "Project_1-Group H.html",
    "href": "Project_1-Group H.html",
    "title": "ST 558 Project 1 - Group H",
    "section": "",
    "text": "library(readr)\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tools)"
  },
  {
    "objectID": "Project_1-Group H.html#setup-environment",
    "href": "Project_1-Group H.html#setup-environment",
    "title": "ST 558 Project 1 - Group H",
    "section": "",
    "text": "library(readr)\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tools)"
  },
  {
    "objectID": "Project_1-Group H.html#data-processing",
    "href": "Project_1-Group H.html#data-processing",
    "title": "ST 558 Project 1 - Group H",
    "section": "Data Processing",
    "text": "Data Processing\n\nProcessing steps\n\n# Step 1 - Read in one section of the data \nEDU01a_part &lt;- read_csv(\"EDU01a.csv\") |&gt;\n   select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n   rename(area_name = Area_name) |&gt;\n  \n  # Step 2 - Covert into long format\n  pivot_longer(cols = 3:12,\n               names_to = \"census_field\",\n               values_to = \"value\") |&gt;\n  \n  # Step 3 - pull out the year and convert the year into a numeric value, create a new variable with first 3 char and following 4 digits\n  mutate(year = ifelse(as.numeric(substr(census_field, 8, 9)) &gt; 25, \n                       as.numeric(substr(census_field, 8, 9)) + 1900, as.numeric(substr(census_field, 8, 9)) + 2000),\n        measurement = substr(census_field, 1, 7)) |&gt;\n  collect()\n\n# Step 4 - create two data sets with only non-county data/ only county level data\ncounty_matching &lt;- grep(pattern = \", \\\\w\\\\w\", EDU01a_part$area_name) \ncounty &lt;- EDU01a_part[county_matching,]\nnon_county &lt;- EDU01a_part[-county_matching,]\n  \n# Step 4 - add a class to the county_only data called county\nclass(county) &lt;-c(\"county\", class(county))\n\n# Step 4 - add a class to the non-county level data called state\nclass(non_county) &lt;-c(\"state\", class(non_county))\n\n# Step 5 - create a new variable describe the state\ncounty &lt;-county |&gt; \n  mutate(state = substr(area_name, nchar(county$area_name)-1, nchar(area_name)))\n\n# Step 6 - non-county, Define lists of divisions\nnew_england &lt;- c(\"Connecticut\", \"Maine\", \"Massachusetts\", \"New Hampshire\", \"Rhode Island\", \"Vermont\")\nmiddle_atlantic &lt;- c(\"New Jersey\", \"New York\", \"Pennsylvania\")\neast_north_central &lt;- c(\"Illinois\", \"Indiana\", \"Michigan\", \"Ohio\", \"Wisconsin\")\nwest_north_central &lt;- c(\"Iowa\", \"Kansas\", \"Minnesota\", \"Missouri\", \"Nebraska\", \"North Dakota\", \"South Dakota\")\nsouth_atlantic &lt;- c(\"Delaware\", \"Florida\", \"Georgia\", \"Maryland\", \"North Carolina\", \"South Carolina\", \"Virginia\", \"Washington, D.C.\", \"West Virginia\")\neast_south_central &lt;- c(\"Alabama\", \"Kentucky\", \"Mississippi\", \"Tennessee\")\nwest_south_central &lt;- c(\"Arkansas\", \"Louisiana\", \"Oklahoma\", \"Texas\")\nmountain &lt;- c(\"Arizona\", \"Colorado\", \"Idaho\", \"Montana\", \"Nevada\", \"New Mexico\", \"Utah\", \"Wyoming\")\npacific &lt;- c(\"Alaska\", \"California\", \"Hawaii\", \"Oregon\", \"Washington\")\n\n# Step 6 - Convert the lists to uppercase\nnew_england &lt;- toupper(new_england)\nmiddle_atlantic &lt;- toupper(middle_atlantic)\neast_north_central &lt;- toupper(east_north_central)\nwest_north_central &lt;- toupper(west_north_central)\nsouth_atlantic &lt;- toupper(south_atlantic)\neast_south_central &lt;- toupper(east_south_central)\nwest_south_central &lt;- toupper(west_south_central)\nmountain &lt;- toupper(mountain)\npacific &lt;- toupper(pacific)\n\n# Step 6 - Create a new variable called \"division\"\nnon_county &lt;- non_county |&gt;\n  mutate(division = case_when(\n    toupper(area_name) %in% new_england ~ \"New England\",\n    toupper(area_name) %in% middle_atlantic ~ \"Middle Atlantic\",\n    toupper(area_name) %in% east_north_central ~ \"East North Central\",\n    toupper(area_name) %in% west_north_central ~ \"West North Central\",\n    toupper(area_name) %in% south_atlantic ~ \"South Atlantic\",\n    toupper(area_name) %in% east_south_central ~ \"East South Central\",\n    toupper(area_name) %in% west_south_central ~ \"West South Central\",\n    toupper(area_name) %in% mountain ~ \"Mountain\",\n    toupper(area_name) %in% pacific ~ \"Pacific\",\n    TRUE ~ \"ERROR\"\n  ))\n\n\n\nFunctions for all data processing steps\n\nSteps 1 & 2 function - format all data\n\n# create function with the file path and specified column as inputs\nprocess_data_step_1_2 &lt;- function(df, values_column_name = \"value\"){\n  \n  # load input data\n  step_1_2_output &lt;- df |&gt;\n  \n    # select specified columns\n    select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n    \n    # rename Area_Name\n    rename(area_name = Area_name) |&gt;\n    \n    # put the columns ending in D in long format, under \"enrollment\"\n    pivot_longer(cols = 3:12, names_to = \"census_field\", values_to = values_column_name)\n  \n  # store values_column_name name for later functions\n  attr(step_1_2_output, \"values_column_name\") &lt;- values_column_name\n  \n  # return output\n  return(step_1_2_output)\n}\n\n\n\nStep 3 function - extract year for all data\n\n# create function to extract year and measurements\nprocess_data_step_3 &lt;- function(df){\n  \n  # load input data\n  step_3_output &lt;- df |&gt;\n    \n    # Extract the year and measurement\n    mutate(\n      \n      # extract year from the last 2 digits, add 1900 or 2000 to return a proper value\n      year = ifelse(as.numeric(substr(get(\"census_field\"), 8, 9))&gt;25, \n                    as.numeric(substr(get(\"census_field\"), 8, 9))+1900, \n                    as.numeric(substr(get(\"census_field\"), 8, 9))+2000),\n      \n      # grab measurement value from the first 7 characters\n      measurement = substr(get(\"census_field\"), 1, 7)\n    )\n  \n  # return output\n  return(step_3_output)\n}\n\n\n\nStep 5 function - determine state for county data\n\n# function to determine state for COUNTY data\nprocess_data_step_5 &lt;- function(df){\n  \n  # load input data\n  step_5_output &lt;- df |&gt;\n    \n    # create a new field with the state\n    mutate(state = substr(area_name, nchar(area_name)-1, nchar(area_name)))\n    \n  # return output\n  return(step_5_output)\n}\n\n\n\nStep 6 function - determine division for non-county data\n\n# function to determine classification for NON-COUNTY data\nprocess_data_step_6 &lt;- function(df){\n  \n  # define divisions and uppercase everything\n  new_england &lt;- toupper(c(\"Connecticut\", \"Maine\", \"Massachusetts\", \"New Hampshire\", \"Rhode Island\", \"Vermont\"))\n  middle_atlantic &lt;- toupper(c(\"New Jersey\", \"New York\", \"Pennsylvania\"))\n  east_north_central &lt;- toupper(c(\"Illinois\", \"Indiana\", \"Michigan\", \"Ohio\", \"Wisconsin\"))\n  west_north_central &lt;- toupper(c(\"Iowa\", \"Kansas\", \"Minnesota\", \"Missouri\", \"Nebraska\", \"North Dakota\", \"South Dakota\"))\n  south_atlantic &lt;- toupper(c(\"Delaware\", \"Florida\", \"Georgia\", \"Maryland\", \"North Carolina\", \"South Carolina\", \"Virginia\", \"Washington, D.C.\", \"West Virginia\"))\n  east_south_central &lt;- toupper(c(\"Alabama\", \"Kentucky\", \"Mississippi\", \"Tennessee\"))\n  west_south_central &lt;- toupper(c(\"Arkansas\", \"Louisiana\", \"Oklahoma\", \"Texas\"))\n  mountain &lt;- toupper(c(\"Arizona\", \"Colorado\", \"Idaho\", \"Montana\", \"Nevada\", \"New Mexico\", \"Utah\", \"Wyoming\"))\n  pacific &lt;- toupper(c(\"Alaska\", \"California\", \"Hawaii\", \"Oregon\", \"Washington\"))\n  \n  # load input data\n  step_6_output &lt;- df |&gt;\n    # assign divisions\n    mutate(\n      # uppercase everything so it matches the keys\n      area_name_upper = toupper(area_name),\n      # assign divisions \n      division = case_when(\n        area_name %in% new_england ~ \"New England\",\n        area_name %in% middle_atlantic ~ \"Middle Atlantic\",\n        area_name %in% east_north_central ~ \"East North Central\",\n        area_name %in% west_north_central ~ \"West North Central\",\n        area_name %in% south_atlantic ~ \"South Atlantic\",\n        area_name %in% east_south_central ~ \"East South Central\",\n        area_name %in% west_south_central ~ \"West South Central\",\n        area_name %in% mountain ~ \"Mountain\",\n        area_name %in% pacific ~ \"Pacific\",\n        TRUE ~ \"ERROR\"\n    )) |&gt;\n    # get rid of the new upper field\n    select(-area_name_upper)\n    \n  # return output\n  return(step_6_output)\n}\n\n\n\nStep 4, 5, and 6 function - combine previous functions\n\n# create function to extract year and measurements\nprocess_data_step_4_5_6 &lt;- function(df){\n  \n  # create county data\n  county_matching &lt;- grep(pattern = \", \\\\w\\\\w\", df$area_name) \n  county &lt;- df[county_matching,]\n   \n  # create non-county data\n  non_county &lt;- df[-county_matching,]\n  \n  # Step 4 - add a class to the county_only data called county\n  class(county) &lt;- c(\"county\",class(county))\n  \n  # Step 4 - add a class to the non-county level data called state\n  class(non_county) &lt;- c(\"state\",class(non_county))\n\n  # Step 5 - apply county function\n  county_processed &lt;- process_data_step_5(df = county)\n  \n  # Step 6 - apply non-county function\n  non_county_processed &lt;- process_data_step_6(df = non_county)\n  \n  # return new tibbles as a list\n  return(list(county = county_processed, non_county = non_county_processed))\n}\n\n\n\nWrapper function - run all preprocessing steps\n\nprocess_all_data &lt;- function(file_path, values_column_name = \"value\"){\n  \n  # load data\n  result &lt;- read_csv(file_path) |&gt;\n    \n    # select fields, transform data\n    process_data_step_1_2(values_column_name = values_column_name) |&gt;\n    \n    # extract year and measurement\n    process_data_step_3() |&gt;\n    \n    # split data, determine state for non-county data, class for county data\n    process_data_step_4_5_6()\n  \n  # return results\n  return(result)\n}\n\n# call function and output\nEDU01a_part &lt;- process_all_data(file_path = \"EDU01a.csv\", values_column_name = \"Enrollment\")\nEDU01b_part &lt;- process_all_data(file_path = \"EDU01b.csv\", values_column_name = \"Enrollment\")\n\n\n\nCombine data function\n\n# create function to combine data\ncombine_processed_data &lt;- function(df1, df2){\n  \n  # combine county data\n  combined_county &lt;- bind_rows(df1$county, df2$county)\n  \n  # combine non-county data\n  combined_non_county &lt;- bind_rows(df1$non_county, df2$non_county)\n  \n  # combine to a list\n  combined_data &lt;- list(county = combined_county, non_county = combined_non_county)\n  \n  # return results\n  return(combined_data)\n}\n\n# call function and combine data\ncombined_processed_data &lt;- combine_processed_data(EDU01a_part, EDU01b_part)\n\n# print results\nstr(combined_processed_data)\n\nList of 2\n $ county    : county [62,900 × 7] (S3: county/tbl_df/tbl/data.frame)\n  ..$ area_name   : chr [1:62900] \"Autauga, AL\" \"Autauga, AL\" \"Autauga, AL\" \"Autauga, AL\" ...\n  ..$ STCOU       : chr [1:62900] \"01001\" \"01001\" \"01001\" \"01001\" ...\n  ..$ census_field: chr [1:62900] \"EDU010187D\" \"EDU010188D\" \"EDU010189D\" \"EDU010190D\" ...\n  ..$ Enrollment  : num [1:62900] 6829 6900 6920 6847 7008 ...\n  ..$ year        : num [1:62900] 1987 1988 1989 1990 1991 ...\n  ..$ measurement : chr [1:62900] \"EDU0101\" \"EDU0101\" \"EDU0101\" \"EDU0101\" ...\n  ..$ state       : chr [1:62900] \"AL\" \"AL\" \"AL\" \"AL\" ...\n  ..- attr(*, \"values_column_name\")= chr \"Enrollment\"\n $ non_county: state [1,060 × 7] (S3: state/tbl_df/tbl/data.frame)\n  ..$ area_name   : chr [1:1060] \"UNITED STATES\" \"UNITED STATES\" \"UNITED STATES\" \"UNITED STATES\" ...\n  ..$ STCOU       : chr [1:1060] \"00000\" \"00000\" \"00000\" \"00000\" ...\n  ..$ census_field: chr [1:1060] \"EDU010187D\" \"EDU010188D\" \"EDU010189D\" \"EDU010190D\" ...\n  ..$ Enrollment  : num [1:1060] 40024299 39967624 40317775 40737600 41385442 ...\n  ..$ year        : num [1:1060] 1987 1988 1989 1990 1991 ...\n  ..$ measurement : chr [1:1060] \"EDU0101\" \"EDU0101\" \"EDU0101\" \"EDU0101\" ...\n  ..$ division    : chr [1:1060] \"ERROR\" \"ERROR\" \"ERROR\" \"ERROR\" ...\n  ..- attr(*, \"values_column_name\")= chr \"Enrollment\""
  },
  {
    "objectID": "Project_1-Group H.html#generic-functions-for-summarizing",
    "href": "Project_1-Group H.html#generic-functions-for-summarizing",
    "title": "ST 558 Project 1 - Group H",
    "section": "Generic Functions for Summarizing",
    "text": "Generic Functions for Summarizing\n\nState plot function\n\n# create function for plotting for state\nplot.state &lt;- function(df, values_column_name = \"value\"){\n  \n  # Calculate the mean for each division and year\n  summarize_df &lt;- df |&gt;\n    \n    # Remove observations with \"ERROR\" in Division\n    filter(division != \"ERROR\") |&gt; \n    \n    # group by division and yer \n    group_by(division, year) |&gt; \n    \n    # calculate the mean across the years for each Division\n    summarize(mean_value = mean(get(values_column_name), na.rm = TRUE), .groups = 'drop')\n\n  # Create the plot\n  p &lt;- ggplot(summarize_df, aes(x = year, y = mean_value, color = division, group = division)) +\n    geom_line() +\n    labs(\n      title = paste(values_column_name, \"Mean by Year and Division\"),\n      x = \"Year\",\n      y = paste(values_column_name, \"Mean\")\n    ) +\n    theme_minimal()\n  \n  # return results\n  return(p)\n}\n\n# test the plot\nplot.state(combined_processed_data$non_county, values_column_name = \"Enrollment\")\n\n\n\n\n\n\n\n\n\n\nCounty plot function\n\n# create function for plotting county\nplot.county &lt;- function(df, state_of_interest = \"AL\", values_column_name = \"value\", top_or_bottom = \"top\", num_counties = 5){\n  \n  # case inputs\n  top_or_bottom &lt;- tolower(top_or_bottom)\n  state_of_interest &lt;- toupper(state_of_interest)\n  var_name &lt;- tolower(values_column_name)\n  \n  # warning on invalid inputs\n  if (!(top_or_bottom %in% c(\"top\", \"bottom\"))) {\n    warning(\"Invalid value for 'top_or_bottom'. Defaulting to 'top'.\")\n    top_or_bottom &lt;- \"top\"\n  }\n  \n  # Filter the data to only include the specified state without quotes\n  state_data &lt;- df |&gt;\n    filter(state == !!state_of_interest)\n  \n  # Calculate the overall mean of the statistic for each Area_name and sort\n  area_means &lt;- state_data |&gt;\n    group_by(area_name) |&gt;\n    summarize(mean_value = mean(.data[[values_column_name]], na.rm = TRUE), .groups = 'drop') |&gt;\n    arrange(if (top_or_bottom == \"top\") desc(mean_value) else mean_value)\n  \n  # Obtain the top or bottom x number of Area_names\n  selected_areas &lt;- area_means |&gt;\n    slice_head(n = num_counties) |&gt;\n    pull(area_name)\n  \n  # Filter the data for the specified state and selected Area_names\n  plot_data &lt;- state_data |&gt;\n    filter(area_name %in% selected_areas)\n  \n  # Create the plot\n  p &lt;- ggplot(plot_data, aes(x = year, y = .data[[values_column_name]], color = area_name, group = area_name)) +\n    geom_line() +\n    labs(\n      title = paste(values_column_name, \"Total by Year for\", toTitleCase(top_or_bottom), num_counties, \"Counties in\", state_of_interest),\n      x = \"Year\",\n      y = paste(values_column_name)\n    ) +\n    theme_minimal()\n  \n  # return results\n  return(p)\n}\n\n# Test plot\nplot.county(combined_processed_data$county,\n            state_of_interest = \"AL\", \n            values_column_name = \"Enrollment\", \n            top_or_bottom = \"top\", \n            num_counties = 10)"
  },
  {
    "objectID": "Project_1-Group H.html#put-everything-together",
    "href": "Project_1-Group H.html#put-everything-together",
    "title": "ST 558 Project 1 - Group H",
    "section": "Put everything together",
    "text": "Put everything together\n\nPlots for previous enrollment data\n\n# preprocess data\nEDU01a_part &lt;- process_all_data(file_path = \"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\", values_column_name = \"Enrollment\")\nEDU01b_part &lt;- process_all_data(file_path = \"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\", values_column_name = \"Enrollment\")\n\n# combine processed data\ncombined_processed_data &lt;- combine_processed_data(EDU01a_part, EDU01b_part)\n\n# plot state\nplot.state(combined_processed_data$non_county, values_column_name = \"Enrollment\")\n\n\n\n\n\n\n\n# plot.county state NC top 20\nplot.county(combined_processed_data$county,\n            state_of_interest = \"NC\", \n            values_column_name = \"Enrollment\", \n            top_or_bottom = \"top\", \n            num_counties = 20)\n\n\n\n\n\n\n\n# plot.county state SC bottom 7\nplot.county(combined_processed_data$county,\n            state_of_interest = \"SC\", \n            values_column_name = \"Enrollment\", \n            top_or_bottom = \"bottom\", \n            num_counties = 7)\n\n\n\n\n\n\n\n# plot.county state defaults\nplot.county(combined_processed_data$county,\n            values_column_name = \"Enrollment\") # doc mentioned in a comment this was fine\n\n\n\n\n\n\n\n# plot.county state PA top 8\nplot.county(\n  combined_processed_data$county,\n  state_of_interest = \"PA\", \n  values_column_name = \"Enrollment\", \n  top_or_bottom = \"top\", \n  num_counties = 8\n)\n\n\n\n\n\n\n\n\n\n\nPlots for new population data\n\n# preprocess data\nPST01a_part &lt;- process_all_data(file_path = \"https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv\", values_column_name = \"Population\")\nPST01b_part &lt;- process_all_data(file_path = \"https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv\", values_column_name = \"Population\")\nPST01c_part &lt;- process_all_data(file_path = \"https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv\", values_column_name = \"Population\")\nPST01d_part &lt;- process_all_data(file_path = \"https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv\", values_column_name = \"Population\")\n\n# combine processed data\ncombined_processed_data &lt;- combine_processed_data(PST01a_part, PST01b_part)\ncombined_processed_data &lt;- combine_processed_data(combined_processed_data, PST01c_part)\ncombined_processed_data &lt;- combine_processed_data(combined_processed_data, PST01d_part)\n\n# plot state\nplot.state(combined_processed_data$non_county, \n           values_column_name = \"Population\")\n\n\n\n\n\n\n\n# plot.county CA top 15\nplot.county(combined_processed_data$county,\n            state_of_interest = \"CA\", \n            values_column_name = \"Population\", \n            top_or_bottom = \"top\", \n            num_counties = 15)\n\n\n\n\n\n\n\n# plot.county state TX top 4\nplot.county(combined_processed_data$county,\n            state_of_interest = \"TX\", \n            values_column_name = \"Population\", \n            top_or_bottom = \"top\", \n            num_counties = 4)\n\n\n\n\n\n\n\n# plot.county defaults\nplot.county(combined_processed_data$county, \n            values_column_name = \"Population\") # doc made a comment that specifying the field to plot here is fine\n\n\n\n\n\n\n\n# plot.county state NY top 10\nplot.county(combined_processed_data$county,\n            state_of_interest = \"NY\", \n            values_column_name = \"Population\", \n            top_or_bottom = \"top\", \n            num_counties = 10)"
  }
]