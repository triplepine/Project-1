[
  {
    "objectID": "Project_1-Group H.html",
    "href": "Project_1-Group H.html",
    "title": "Project 1 - Group H",
    "section": "",
    "text": "library(readr)\n\nWarning: package 'readr' was built under R version 4.3.3\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'tibble' was built under R version 4.3.3\n\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\n\nWarning: package 'purrr' was built under R version 4.3.3\n\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\nWarning: package 'stringr' was built under R version 4.3.3\n\n\nWarning: package 'forcats' was built under R version 4.3.3\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ purrr     1.0.2\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(lubridate)\n\n# Read in one section of the data \nEDU01a_part &lt;- read_csv(\"EDU01a.csv\") |&gt;\n   select(Area_name,STCOU,ends_with(\"D\")) |&gt;\n   rename(area_name=Area_name) |&gt;\n# Covert into long format\n  pivot_longer(cols=3:12,\n               names_to = \"enrollment\",\n               values_to = \"number\") |&gt;\n# pull out the year and convert the year into a numeric value\n# create a new variable with first 3 char and following 4 digits\n  mutate(year=ifelse(as.numeric(substr(enrollment,8,9))&gt;25,as.numeric(substr(enrollment,8,9))+1900,as.numeric(substr(enrollment,8,9))+2000),\n        measurement=substr(enrollment,1,7)) |&gt;\n  collect()\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# create two data sets with only non-county data/ only county level data\n\ncounty_matching &lt;- grep(pattern=\", \\\\w\\\\w\", EDU01a_part$area_name) \ncounty &lt;- EDU01a_part[county_matching,]\nnon_county &lt;- EDU01a_part[-county_matching,]\n  \n# add a class to the county_only data called county\nclass(county) &lt;-c(\"county\",class(county))\n\n# add a class to the non-county level data called state\nclass(non_county) &lt;-c(\"state\",class(non_county))\n\n# county-- create a new variable describe the state\ncounty &lt;-county |&gt; \n  mutate(state=substr(area_name,nchar(county$area_name)-1,nchar(area_name)))\n\n# non-county --create a new variable called division\n# Define lists of divisions\nnew_england &lt;- c(\"Connecticut\", \"Maine\", \"Massachusetts\", \"New Hampshire\", \"Rhode Island\", \"Vermont\")\nmiddle_atlantic &lt;- c(\"New Jersey\", \"New York\", \"Pennsylvania\")\neast_north_central &lt;- c(\"Illinois\", \"Indiana\", \"Michigan\", \"Ohio\", \"Wisconsin\")\nwest_north_central &lt;- c(\"Iowa\", \"Kansas\", \"Minnesota\", \"Missouri\", \"Nebraska\", \"North Dakota\", \"South Dakota\")\nsouth_atlantic &lt;- c(\"Delaware\", \"Florida\", \"Georgia\", \"Maryland\", \"North Carolina\", \"South Carolina\", \"Virginia\", \"Washington, D.C.\", \"West Virginia\")\neast_south_central &lt;- c(\"Alabama\", \"Kentucky\", \"Mississippi\", \"Tennessee\")\nwest_south_central &lt;- c(\"Arkansas\", \"Louisiana\", \"Oklahoma\", \"Texas\")\nmountain &lt;- c(\"Arizona\", \"Colorado\", \"Idaho\", \"Montana\", \"Nevada\", \"New Mexico\", \"Utah\", \"Wyoming\")\npacific &lt;- c(\"Alaska\", \"California\", \"Hawaii\", \"Oregon\", \"Washington\")\n\n# Convert the lists to uppercase\nnew_england &lt;- toupper(new_england)\nmiddle_atlantic &lt;- toupper(middle_atlantic)\neast_north_central &lt;- toupper(east_north_central)\nwest_north_central &lt;- toupper(west_north_central)\nsouth_atlantic &lt;- toupper(south_atlantic)\neast_south_central &lt;- toupper(east_south_central)\nwest_south_central &lt;- toupper(west_south_central)\nmountain &lt;- toupper(mountain)\npacific &lt;- toupper(pacific)\n\n# Assuming non_county is your data frame, convert the area_name column to uppercase\nnon_county &lt;- non_county |&gt;\n  mutate(division = case_when(\n    area_name %in% new_england ~ \"New England\",\n    area_name %in% middle_atlantic ~ \"Middle Atlantic\",\n    area_name %in% east_north_central ~ \"East North Central\",\n    area_name %in% west_north_central ~ \"West North Central\",\n    area_name %in% south_atlantic ~ \"South Atlantic\",\n    area_name %in% east_south_central ~ \"East South Central\",\n    area_name %in% west_south_central ~ \"West South Central\",\n    area_name %in% mountain ~ \"Mountain\",\n    area_name %in% pacific ~ \"Pacific\",\n    TRUE ~ \"ERROR\"\n  ))"
  },
  {
    "objectID": "Project_1-Group H.html#data-processing",
    "href": "Project_1-Group H.html#data-processing",
    "title": "Project 1 - Group H",
    "section": "",
    "text": "library(readr)\n\nWarning: package 'readr' was built under R version 4.3.3\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'tibble' was built under R version 4.3.3\n\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\n\nWarning: package 'purrr' was built under R version 4.3.3\n\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\nWarning: package 'stringr' was built under R version 4.3.3\n\n\nWarning: package 'forcats' was built under R version 4.3.3\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ purrr     1.0.2\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(lubridate)\n\n# Read in one section of the data \nEDU01a_part &lt;- read_csv(\"EDU01a.csv\") |&gt;\n   select(Area_name,STCOU,ends_with(\"D\")) |&gt;\n   rename(area_name=Area_name) |&gt;\n# Covert into long format\n  pivot_longer(cols=3:12,\n               names_to = \"enrollment\",\n               values_to = \"number\") |&gt;\n# pull out the year and convert the year into a numeric value\n# create a new variable with first 3 char and following 4 digits\n  mutate(year=ifelse(as.numeric(substr(enrollment,8,9))&gt;25,as.numeric(substr(enrollment,8,9))+1900,as.numeric(substr(enrollment,8,9))+2000),\n        measurement=substr(enrollment,1,7)) |&gt;\n  collect()\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# create two data sets with only non-county data/ only county level data\n\ncounty_matching &lt;- grep(pattern=\", \\\\w\\\\w\", EDU01a_part$area_name) \ncounty &lt;- EDU01a_part[county_matching,]\nnon_county &lt;- EDU01a_part[-county_matching,]\n  \n# add a class to the county_only data called county\nclass(county) &lt;-c(\"county\",class(county))\n\n# add a class to the non-county level data called state\nclass(non_county) &lt;-c(\"state\",class(non_county))\n\n# county-- create a new variable describe the state\ncounty &lt;-county |&gt; \n  mutate(state=substr(area_name,nchar(county$area_name)-1,nchar(area_name)))\n\n# non-county --create a new variable called division\n# Define lists of divisions\nnew_england &lt;- c(\"Connecticut\", \"Maine\", \"Massachusetts\", \"New Hampshire\", \"Rhode Island\", \"Vermont\")\nmiddle_atlantic &lt;- c(\"New Jersey\", \"New York\", \"Pennsylvania\")\neast_north_central &lt;- c(\"Illinois\", \"Indiana\", \"Michigan\", \"Ohio\", \"Wisconsin\")\nwest_north_central &lt;- c(\"Iowa\", \"Kansas\", \"Minnesota\", \"Missouri\", \"Nebraska\", \"North Dakota\", \"South Dakota\")\nsouth_atlantic &lt;- c(\"Delaware\", \"Florida\", \"Georgia\", \"Maryland\", \"North Carolina\", \"South Carolina\", \"Virginia\", \"Washington, D.C.\", \"West Virginia\")\neast_south_central &lt;- c(\"Alabama\", \"Kentucky\", \"Mississippi\", \"Tennessee\")\nwest_south_central &lt;- c(\"Arkansas\", \"Louisiana\", \"Oklahoma\", \"Texas\")\nmountain &lt;- c(\"Arizona\", \"Colorado\", \"Idaho\", \"Montana\", \"Nevada\", \"New Mexico\", \"Utah\", \"Wyoming\")\npacific &lt;- c(\"Alaska\", \"California\", \"Hawaii\", \"Oregon\", \"Washington\")\n\n# Convert the lists to uppercase\nnew_england &lt;- toupper(new_england)\nmiddle_atlantic &lt;- toupper(middle_atlantic)\neast_north_central &lt;- toupper(east_north_central)\nwest_north_central &lt;- toupper(west_north_central)\nsouth_atlantic &lt;- toupper(south_atlantic)\neast_south_central &lt;- toupper(east_south_central)\nwest_south_central &lt;- toupper(west_south_central)\nmountain &lt;- toupper(mountain)\npacific &lt;- toupper(pacific)\n\n# Assuming non_county is your data frame, convert the area_name column to uppercase\nnon_county &lt;- non_county |&gt;\n  mutate(division = case_when(\n    area_name %in% new_england ~ \"New England\",\n    area_name %in% middle_atlantic ~ \"Middle Atlantic\",\n    area_name %in% east_north_central ~ \"East North Central\",\n    area_name %in% west_north_central ~ \"West North Central\",\n    area_name %in% south_atlantic ~ \"South Atlantic\",\n    area_name %in% east_south_central ~ \"East South Central\",\n    area_name %in% west_south_central ~ \"West South Central\",\n    area_name %in% mountain ~ \"Mountain\",\n    area_name %in% pacific ~ \"Pacific\",\n    TRUE ~ \"ERROR\"\n  ))"
  },
  {
    "objectID": "Project_1-Group H.html#writing-a-generic-function-for-summarizing",
    "href": "Project_1-Group H.html#writing-a-generic-function-for-summarizing",
    "title": "Project 1 - Group H",
    "section": "Writing a Generic Function for Summarizing",
    "text": "Writing a Generic Function for Summarizing"
  },
  {
    "objectID": "Project_1-Group H.html#put-together",
    "href": "Project_1-Group H.html#put-together",
    "title": "Project 1 - Group H",
    "section": "Put Together",
    "text": "Put Together"
  }
]