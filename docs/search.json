[
  {
    "objectID": "Project_1-Group H.html",
    "href": "Project_1-Group H.html",
    "title": "Project 1 - Group H",
    "section": "",
    "text": "Problem resolutions\n\npicture problem was resolved by using “embed-resources: true” rather than creating png files\nuse “quarto render” in terminal"
  },
  {
    "objectID": "Project_1-Group H.html#setup-environment",
    "href": "Project_1-Group H.html#setup-environment",
    "title": "Project 1 - Group H",
    "section": "Setup environment",
    "text": "Setup environment\n\nlibrary(readr)\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(ggplot2)"
  },
  {
    "objectID": "Project_1-Group H.html#data-processing",
    "href": "Project_1-Group H.html#data-processing",
    "title": "Project 1 - Group H",
    "section": "Data Processing",
    "text": "Data Processing\n\nProcessing steps\n\n# Step 1 - Read in one section of the data \nEDU01a_part <- read_csv(\"EDU01a.csv\") |>\n   select(Area_name,STCOU,ends_with(\"D\")) |>\n   rename(area_name=Area_name) |>\n  \n  # Step 2 - Covert into long format\n  pivot_longer(cols=3:12,\n               names_to = \"enrollment\",\n               values_to = \"number\") |>\n  \n  # Step 3 - pull out the year and convert the year into a numeric value, create a new variable with first 3 char and following 4 digits\n  mutate(year = ifelse(as.numeric(substr(enrollment,8,9))>25,as.numeric(substr(enrollment,8,9))+1900,as.numeric(substr(enrollment,8,9))+2000),\n        measurement = substr(enrollment,1,7)) |>\n  collect()\n\n# Step 4 - create two data sets with only non-county data/ only county level data\ncounty_matching <- grep(pattern=\", \\\\w\\\\w\", EDU01a_part$area_name) \ncounty <- EDU01a_part[county_matching,]\nnon_county <- EDU01a_part[-county_matching,]\n  \n# Step 4 - add a class to the county_only data called county\nclass(county) <-c(\"county\",class(county))\n\n# Step 4 - add a class to the non-county level data called state\nclass(non_county) <-c(\"state\",class(non_county))\n\n# Step 5 - create a new variable describe the state\ncounty <-county |> \n  mutate(state=substr(area_name,nchar(county$area_name)-1,nchar(area_name)))\n\n# Step 6 - non-county, Define lists of divisions\nnew_england <- c(\"Connecticut\", \"Maine\", \"Massachusetts\", \"New Hampshire\", \"Rhode Island\", \"Vermont\")\nmiddle_atlantic <- c(\"New Jersey\", \"New York\", \"Pennsylvania\")\neast_north_central <- c(\"Illinois\", \"Indiana\", \"Michigan\", \"Ohio\", \"Wisconsin\")\nwest_north_central <- c(\"Iowa\", \"Kansas\", \"Minnesota\", \"Missouri\", \"Nebraska\", \"North Dakota\", \"South Dakota\")\nsouth_atlantic <- c(\"Delaware\", \"Florida\", \"Georgia\", \"Maryland\", \"North Carolina\", \"South Carolina\", \"Virginia\", \"Washington, D.C.\", \"West Virginia\")\neast_south_central <- c(\"Alabama\", \"Kentucky\", \"Mississippi\", \"Tennessee\")\nwest_south_central <- c(\"Arkansas\", \"Louisiana\", \"Oklahoma\", \"Texas\")\nmountain <- c(\"Arizona\", \"Colorado\", \"Idaho\", \"Montana\", \"Nevada\", \"New Mexico\", \"Utah\", \"Wyoming\")\npacific <- c(\"Alaska\", \"California\", \"Hawaii\", \"Oregon\", \"Washington\")\n\n# Step 6 - Convert the lists to uppercase\nnew_england <- toupper(new_england)\nmiddle_atlantic <- toupper(middle_atlantic)\neast_north_central <- toupper(east_north_central)\nwest_north_central <- toupper(west_north_central)\nsouth_atlantic <- toupper(south_atlantic)\neast_south_central <- toupper(east_south_central)\nwest_south_central <- toupper(west_south_central)\nmountain <- toupper(mountain)\npacific <- toupper(pacific)\n\n# Step 6 -Assuming non_county is your data frame, convert the area_name column to uppercase\nnon_county <- non_county |>\n  mutate(division = case_when(\n    area_name %in% new_england ~ \"New England\",\n    area_name %in% middle_atlantic ~ \"Middle Atlantic\",\n    area_name %in% east_north_central ~ \"East North Central\",\n    area_name %in% west_north_central ~ \"West North Central\",\n    area_name %in% south_atlantic ~ \"South Atlantic\",\n    area_name %in% east_south_central ~ \"East South Central\",\n    area_name %in% west_south_central ~ \"West South Central\",\n    area_name %in% mountain ~ \"Mountain\",\n    area_name %in% pacific ~ \"Pacific\",\n    TRUE ~ \"ERROR\"\n  ))\n\n\n\nFunctions for all data processing steps\n\nSteps 1 & 2 function - format all data\n\n# create function with the file path and specified column as inputs\nprocess_data_step_1_2 <- function(file_path, input_col = \"enrollment\"){\n  \n  # load input data\n  step_1_2_output <- read_csv(file_path) |>\n  \n    # select specified columns\n    select(Area_name, STCOU, ends_with(\"D\")) |>\n    \n    # rename Area_Name\n    rename(area_name = Area_name) |>\n    \n    # put the columns ending in D in long format, under \"enrollment\"\n    pivot_longer(cols = 3:12, names_to = input_col, values_to = \"number\")\n  \n  # return output\n  return(step_1_2_output)\n}\n\n\n\nStep 3 function - extract year for all data\n\n# create function to extract year and measurements\nprocess_data_step_3 <- function(input_tibble){\n  \n  # load input data\n  step_3_output <- input_tibble |>\n    \n    # Extract the year and measurement\n    mutate(\n      # extract year from the last 2 digits, add 1900 or 2000 to return a proper value\n      year = ifelse(as.numeric(substr(enrollment,8,9))>25,as.numeric(substr(enrollment,8,9))+1900,as.numeric(substr(enrollment,8,9))+2000),\n      # grab measurement value from the first 7 characters\n      measurement = substr(enrollment,1,7)\n    )\n  # return output\n  return(step_3_output)\n}\n\n\n\nStep 5 function - determine state for county data\n\n# function to determine state for COUNTY data\nprocess_data_step_5 <- function(input_tibble){\n  \n  # load input data\n  step_5_output <- input_tibble |>\n    # create a new field with the state\n    mutate(state = substr(area_name, nchar(area_name)-1, nchar(area_name)))\n    \n  # return output\n  return(step_5_output)\n}\n\n\n\nStep 6 function - determine division for non-county data\n\n# function to determine classification for NON-COUNTY data\nprocess_data_step_6 <- function(input_tibble){\n  \n  # define divisions and uppercase everything\n  new_england <- toupper(c(\"Connecticut\", \"Maine\", \"Massachusetts\", \"New Hampshire\", \"Rhode Island\", \"Vermont\"))\n  middle_atlantic <- toupper(c(\"New Jersey\", \"New York\", \"Pennsylvania\"))\n  east_north_central <- toupper(c(\"Illinois\", \"Indiana\", \"Michigan\", \"Ohio\", \"Wisconsin\"))\n  west_north_central <- toupper(c(\"Iowa\", \"Kansas\", \"Minnesota\", \"Missouri\", \"Nebraska\", \"North Dakota\", \"South Dakota\"))\n  south_atlantic <- toupper(c(\"Delaware\", \"Florida\", \"Georgia\", \"Maryland\", \"North Carolina\", \"South Carolina\", \"Virginia\", \"Washington, D.C.\", \"West Virginia\"))\n  east_south_central <- toupper(c(\"Alabama\", \"Kentucky\", \"Mississippi\", \"Tennessee\"))\n  west_south_central <- toupper(c(\"Arkansas\", \"Louisiana\", \"Oklahoma\", \"Texas\"))\n  mountain <- toupper(c(\"Arizona\", \"Colorado\", \"Idaho\", \"Montana\", \"Nevada\", \"New Mexico\", \"Utah\", \"Wyoming\"))\n  pacific <- toupper(c(\"Alaska\", \"California\", \"Hawaii\", \"Oregon\", \"Washington\"))\n  \n  # load input data\n  step_6_output <- input_tibble |>\n    # assign divisions\n    mutate(\n      # uppercase everything so it matches the keys\n      area_name_upper = toupper(area_name),\n      # assign divisions \n      division = case_when(\n        area_name %in% new_england ~ \"New England\",\n        area_name %in% middle_atlantic ~ \"Middle Atlantic\",\n        area_name %in% east_north_central ~ \"East North Central\",\n        area_name %in% west_north_central ~ \"West North Central\",\n        area_name %in% south_atlantic ~ \"South Atlantic\",\n        area_name %in% east_south_central ~ \"East South Central\",\n        area_name %in% west_south_central ~ \"West South Central\",\n        area_name %in% mountain ~ \"Mountain\",\n        area_name %in% pacific ~ \"Pacific\",\n        TRUE ~ \"ERROR\"\n    )) |>\n    # get rid of the new upper field\n    select(-area_name_upper)\n    \n  # return output\n  return(step_6_output)\n}\n\n\n\nStep 4, 5, and 6 function - combine previous functions\n\n# create function to extract year and measurements\nprocess_data_step_4_5_6 <- function(input_tibble){\n  \n  # create county data\n  county_matching <- grep(pattern = \", \\\\w\\\\w\", input_tibble$area_name) \n  county <- input_tibble[county_matching,]\n   \n  # create non-county data\n  non_county <- input_tibble[-county_matching,]\n  \n  # Step 4 - add a class to the county_only data called county\n  class(county) <- c(\"county\",class(county))\n  \n  # Step 4 - add a class to the non-county level data called state\n  class(non_county) <- c(\"state\",class(non_county))\n\n  # Step 5 - apply county function\n  county_processed <- process_data_step_5(input_tibble = county)\n  \n  # Step 6 - apply non-county function\n  non_county_processed <- process_data_step_6(input_tibble = non_county)\n  \n  # return new tibbles as a list\n  return(list(county = county_processed, non_county = non_county_processed))\n}\n\n\n\nWrapper function - run all preprocessing steps\n\nprocess_all_data <- function(file_path, input_col = \"enrollment\"){\n  \n  # load data\n  result <- process_data_step_1_2(file_path = file_path, input_col = \"enrollment\") |>\n    \n    # extract year and measurement\n    process_data_step_3() |>\n    \n    # split data, determine state for non-county data, class for county data\n    process_data_step_4_5_6()\n  \n  # return results\n  return(result)\n}\n\n# call function and output\nEDU01a_part <- process_all_data(file_path = \"EDU01a.csv\", input_col = \"enrollment\")\nEDU01b_part <- process_all_data(file_path = \"EDU01b.csv\", input_col = \"enrollment\")\n\n\n\nCombine data function\n\n# create function to combine data\ncombine_processed_data <- function(input_tibble1, input_tibble2){\n  \n  # combine county data\n  combined_county <- bind_rows(input_tibble1$county, input_tibble2$county)\n  \n  # combine non-county data\n  combined_non_county <- bind_rows(input_tibble1$non_county, input_tibble2$non_county)\n  \n  # combine to a list\n  combined_data <- list(county = combined_county, non_county = combined_non_county)\n  \n  # return results\n  return(combined_data)\n}\n\n# call function and combine data\ncombined_processed_data <- combine_processed_data(EDU01a_part, EDU01b_part)\n\n# print results\nstr(combined_processed_data)\n\nList of 2\n $ county    : county [62,900 × 7] (S3: county/tbl_df/tbl/data.frame)\n  ..$ area_name  : chr [1:62900] \"Autauga, AL\" \"Autauga, AL\" \"Autauga, AL\" \"Autauga, AL\" ...\n  ..$ STCOU      : chr [1:62900] \"01001\" \"01001\" \"01001\" \"01001\" ...\n  ..$ enrollment : chr [1:62900] \"EDU010187D\" \"EDU010188D\" \"EDU010189D\" \"EDU010190D\" ...\n  ..$ number     : num [1:62900] 6829 6900 6920 6847 7008 ...\n  ..$ year       : num [1:62900] 1987 1988 1989 1990 1991 ...\n  ..$ measurement: chr [1:62900] \"EDU0101\" \"EDU0101\" \"EDU0101\" \"EDU0101\" ...\n  ..$ state      : chr [1:62900] \"AL\" \"AL\" \"AL\" \"AL\" ...\n $ non_county: state [1,060 × 7] (S3: state/tbl_df/tbl/data.frame)\n  ..$ area_name  : chr [1:1060] \"UNITED STATES\" \"UNITED STATES\" \"UNITED STATES\" \"UNITED STATES\" ...\n  ..$ STCOU      : chr [1:1060] \"00000\" \"00000\" \"00000\" \"00000\" ...\n  ..$ enrollment : chr [1:1060] \"EDU010187D\" \"EDU010188D\" \"EDU010189D\" \"EDU010190D\" ...\n  ..$ number     : num [1:1060] 40024299 39967624 40317775 40737600 41385442 ...\n  ..$ year       : num [1:1060] 1987 1988 1989 1990 1991 ...\n  ..$ measurement: chr [1:1060] \"EDU0101\" \"EDU0101\" \"EDU0101\" \"EDU0101\" ...\n  ..$ division   : chr [1:1060] \"ERROR\" \"ERROR\" \"ERROR\" \"ERROR\" ..."
  },
  {
    "objectID": "Project_1-Group H.html#generic-functions-for-summarizing",
    "href": "Project_1-Group H.html#generic-functions-for-summarizing",
    "title": "Project 1 - Group H",
    "section": "Generic Functions for Summarizing",
    "text": "Generic Functions for Summarizing\n\nState plot function\n\n# create function for plotting for state\nplot.state <- function(df, var_name = \"number\"){\n  \n  # Calculate the mean for each division and year\n  summarize_df <- df |>\n    \n    # Remove observations with \"ERROR\" in Division\n    filter(division != \"ERROR\") |> \n    \n    # group by division and yer \n    group_by(division, year) |> \n    \n    # calculate the mean across the years for each Division\n    summarize(mean_value = mean(get(var_name), na.rm = TRUE), .groups = 'drop')\n\n  # Create the plot\n  p <- ggplot(summarize_df, aes(x = year, y = mean_value, color = division, group = division)) +\n    geom_line() +\n    labs(\n      title = paste(\"Mean\", var_name, \"by Year and Division\"),\n      x = \"Year\",\n      y = paste(\"Mean\", var_name)\n    ) +\n    theme_minimal()\n  \n  # return results\n  return(p)\n}\n\n# test the plot\nplot.state(combined_processed_data[[2]], var_name = \"number\")\n\n\n\n\n\n\nCounty plot function\n\n# create function for plotting county\nplot.county <- function(df, state_of_interest = \"AL\", var_name = \"number\", top_or_bottom = \"top\", num_counties = 5){\n  \n  # case inputs\n  top_or_bottom <- tolower(top_or_bottom)\n  state_of_interest <- toupper(state_of_interest)\n  var_name <- tolower(var_name)\n  \n  # warning on invalid inputs\n  if (!(top_or_bottom %in% c(\"top\", \"bottom\"))) {\n    warning(\"Invalid value for 'top_or_bottom'. Defaulting to 'top'.\")\n    top_or_bottom <- \"top\"\n  }\n  \n  # Filter the data to only include the specified state without quotes\n  state_data <- df |>\n    filter(state == !!state_of_interest)\n  \n  # Calculate the overall mean of the statistic for each Area_name and sort\n  area_means <- state_data |>\n    group_by(area_name) |>\n    summarize(mean_value = mean(.data[[var_name]], na.rm = TRUE), .groups = 'drop') |>\n    arrange(if (top_or_bottom == \"top\") desc(mean_value) else mean_value)\n  \n  # Obtain the top or bottom x number of Area_names\n  selected_areas <- area_means |>\n    slice_head(n = num_counties) |>\n    pull(area_name)\n  \n  # Filter the data for the specified state and selected Area_names\n  plot_data <- state_data |>\n    filter(area_name %in% selected_areas)\n  \n  # Create the plot\n  p <- ggplot(plot_data, aes(x = year, y = .data[[var_name]], color = area_name, group = area_name)) +\n    geom_line() +\n    labs(\n      title = paste(\"Enrollment by Year for Top/Bottom\", num_counties, \"Counties in\", state_of_interest),\n      x = \"Year\",\n      y = paste(\"Enrollment\")\n    ) +\n    theme_minimal()\n  \n  # return results\n  return(p)\n}\n\n# Test plot\nplot.county(combined_processed_data[[1]],\n            state_of_interest = \"AL\", \n            var_name = \"number\", \n            top_or_bottom = \"top\", \n            num_counties = 10)"
  },
  {
    "objectID": "Project_1-Group H.html#put-everything-together",
    "href": "Project_1-Group H.html#put-everything-together",
    "title": "Project 1 - Group H",
    "section": "Put everything together",
    "text": "Put everything together\n\nPlots for previous data\n\n# preprocess data\nEDU01a_part <- process_all_data(file_path = \"EDU01a.csv\", input_col = \"enrollment\")\nEDU01b_part <- process_all_data(file_path = \"EDU01b.csv\", input_col = \"enrollment\")\n\n# combine processed data\ncombined_processed_data <- combine_processed_data(EDU01a_part, EDU01b_part)\n\n# plot state\nplot.state(combined_processed_data$non_county, var_name = \"number\")\n\n\n\n# plot.county state NC top 20\nplot.county(combined_processed_data$county,\n            state_of_interest = \"NC\", \n            var_name = \"number\", \n            top_or_bottom = \"top\", \n            num_counties = 20)\n\n\n\n# plot.county state SC bottom 7\nplot.county(combined_processed_data$county,\n            state_of_interest = \"NC\", \n            var_name = \"number\", \n            top_or_bottom = \"bottom\", \n            num_counties = 7)\n\n\n\n# plot.county state defaults\nplot.county(combined_processed_data$county)\n\n\n\n# plot.county state PA top 8\nplot.county(\n  combined_processed_data$county,\n  state_of_interest = \"PA\", \n  var_name = \"number\", \n  top_or_bottom = \"bottom\", \n  num_counties = 8\n)\n\n\n\n\n\n\nPlots for new data\n\n# preprocess data\nPST01a_part <- process_all_data(file_path = \"https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv\", input_col = \"enrollment\")\nPST01b_part <- process_all_data(file_path = \"https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv\", input_col = \"enrollment\")\nPST01c_part <- process_all_data(file_path = \"https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv\", input_col = \"enrollment\")\nPST01d_part <- process_all_data(file_path = \"https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv\", input_col = \"enrollment\")\n\n# combine processed data\ncombined_processed_data <- combine_processed_data(PST01a_part, PST01b_part)\ncombined_processed_data <- combine_processed_data(combined_processed_data, PST01c_part)\ncombined_processed_data <- combine_processed_data(combined_processed_data, PST01d_part)\n\n# plot state\nplot.state(combined_processed_data$non_county, var_name = \"number\")\n\n\n\n# plot.county state CA top 15\nplot.county(combined_processed_data$county,\n            state_of_interest = \"CA\", \n            var_name = \"number\", \n            top_or_bottom = \"top\", \n            num_counties = 15)"
  }
]