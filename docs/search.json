[
  {
    "objectID": "Project_1-Group H.html",
    "href": "Project_1-Group H.html",
    "title": "Project 1 - Group H",
    "section": "",
    "text": "library(readr)\nlibrary(tidyverse)\nlibrary(dplyr)\n\n# Step 1 - Read in one section of the data \nEDU01a_part <- read_csv(\"EDU01a.csv\") |>\n   select(Area_name,STCOU,ends_with(\"D\")) |>\n   rename(area_name=Area_name) |>\n  # Step 2 - Covert into long format\n  pivot_longer(cols=3:12,\n               names_to = \"enrollment\",\n               values_to = \"number\") |>\n  # Step 3 - pull out the year and convert the year into a numeric value, create a new variable with first 3 char and following 4 digits\n  mutate(year = ifelse(as.numeric(substr(enrollment,8,9))>25,as.numeric(substr(enrollment,8,9))+1900,as.numeric(substr(enrollment,8,9))+2000),\n        measurement = substr(enrollment,1,7)) |>\n  collect()\n\n# Step 4 - create two data sets with only non-county data/ only county level data\ncounty_matching <- grep(pattern=\", \\\\w\\\\w\", EDU01a_part$area_name) \ncounty <- EDU01a_part[county_matching,]\nnon_county <- EDU01a_part[-county_matching,]\n  \n# Step 4 - add a class to the county_only data called county\nclass(county) <-c(\"county\",class(county))\n\n# Step 4 - add a class to the non-county level data called state\nclass(non_county) <-c(\"state\",class(non_county))\n\n# Step 5 - create a new variable describe the state\ncounty <-county |> \n  mutate(state=substr(area_name,nchar(county$area_name)-1,nchar(area_name)))\n\n# Step 6 - non-county, Define lists of divisions\nnew_england <- c(\"Connecticut\", \"Maine\", \"Massachusetts\", \"New Hampshire\", \"Rhode Island\", \"Vermont\")\nmiddle_atlantic <- c(\"New Jersey\", \"New York\", \"Pennsylvania\")\neast_north_central <- c(\"Illinois\", \"Indiana\", \"Michigan\", \"Ohio\", \"Wisconsin\")\nwest_north_central <- c(\"Iowa\", \"Kansas\", \"Minnesota\", \"Missouri\", \"Nebraska\", \"North Dakota\", \"South Dakota\")\nsouth_atlantic <- c(\"Delaware\", \"Florida\", \"Georgia\", \"Maryland\", \"North Carolina\", \"South Carolina\", \"Virginia\", \"Washington, D.C.\", \"West Virginia\")\neast_south_central <- c(\"Alabama\", \"Kentucky\", \"Mississippi\", \"Tennessee\")\nwest_south_central <- c(\"Arkansas\", \"Louisiana\", \"Oklahoma\", \"Texas\")\nmountain <- c(\"Arizona\", \"Colorado\", \"Idaho\", \"Montana\", \"Nevada\", \"New Mexico\", \"Utah\", \"Wyoming\")\npacific <- c(\"Alaska\", \"California\", \"Hawaii\", \"Oregon\", \"Washington\")\n\n# Step 6 - Convert the lists to uppercase\nnew_england <- toupper(new_england)\nmiddle_atlantic <- toupper(middle_atlantic)\neast_north_central <- toupper(east_north_central)\nwest_north_central <- toupper(west_north_central)\nsouth_atlantic <- toupper(south_atlantic)\neast_south_central <- toupper(east_south_central)\nwest_south_central <- toupper(west_south_central)\nmountain <- toupper(mountain)\npacific <- toupper(pacific)\n\n# Step 6 -Assuming non_county is your data frame, convert the area_name column to uppercase\nnon_county <- non_county |>\n  mutate(division = case_when(\n    area_name %in% new_england ~ \"New England\",\n    area_name %in% middle_atlantic ~ \"Middle Atlantic\",\n    area_name %in% east_north_central ~ \"East North Central\",\n    area_name %in% west_north_central ~ \"West North Central\",\n    area_name %in% south_atlantic ~ \"South Atlantic\",\n    area_name %in% east_south_central ~ \"East South Central\",\n    area_name %in% west_south_central ~ \"West South Central\",\n    area_name %in% mountain ~ \"Mountain\",\n    area_name %in% pacific ~ \"Pacific\",\n    TRUE ~ \"ERROR\"\n  ))\n\n\n\n\n\n\n# create function with the file path and specified column as inputs\nprocess_data_step_1_2 <- function(file_path, input_col = \"enrollment\"){\n  \n  # load input data\n  step_1_2_output <- read_csv(file_path) |>\n  \n    # select specified columns\n    select(Area_name, STCOU, ends_with(\"D\")) |>\n    \n    # rename Area_Name\n    rename(area_name = Area_name) |>\n    \n    # put the columns ending in D in long format, under \"enrollment\"\n    pivot_longer(cols = 3:12,\n                 names_to = input_col,\n                 values_to = \"number\")\n  \n  # return output\n  return(step_1_2_output)\n}\n\n\n\n\n\n# create function to extract year and measurements\nprocess_data_step_3 <- function(input_tibble){\n  \n  # load input data\n  step_3_output <- input_tibble |>\n    \n    # Extract the year and measurement\n    mutate(\n      # extract year from the last 2 digits, add 1900 or 2000 to return a proper value\n      year = ifelse(as.numeric(substr(enrollment,8,9))>25,as.numeric(substr(enrollment,8,9))+1900,as.numeric(substr(enrollment,8,9))+2000),\n      # grab measurement value from the first 7 characters\n      measurement = substr(enrollment,1,7)\n    )\n  # return output\n  return(step_3_output)\n}\n\n\n\n\n\n# function to determine state for COUNTY data\nprocess_data_step_5 <- function(input_tibble){\n  \n  # load input data\n  step_5_output <- input_tibble |>\n    # create a new field with the state\n    mutate(state = substr(area_name, nchar(county$area_name)-1, nchar(area_name)))\n    \n  # return output\n  return(step_5_output)\n}\n\n\n\n\n\n# function to determine classification for NON-COUNTY data\nprocess_data_step_6 <- function(input_tibble){\n  \n  # define divisions and uppercase everything\n  new_england <- toupper(c(\"Connecticut\", \"Maine\", \"Massachusetts\", \"New Hampshire\", \"Rhode Island\", \"Vermont\"))\n  middle_atlantic <- toupper(c(\"New Jersey\", \"New York\", \"Pennsylvania\"))\n  east_north_central <- toupper(c(\"Illinois\", \"Indiana\", \"Michigan\", \"Ohio\", \"Wisconsin\"))\n  west_north_central <- toupper(c(\"Iowa\", \"Kansas\", \"Minnesota\", \"Missouri\", \"Nebraska\", \"North Dakota\", \"South Dakota\"))\n  south_atlantic <- toupper(c(\"Delaware\", \"Florida\", \"Georgia\", \"Maryland\", \"North Carolina\", \"South Carolina\", \"Virginia\", \"Washington, D.C.\", \"West Virginia\"))\n  east_south_central <- toupper(c(\"Alabama\", \"Kentucky\", \"Mississippi\", \"Tennessee\"))\n  west_south_central <- toupper(c(\"Arkansas\", \"Louisiana\", \"Oklahoma\", \"Texas\"))\n  mountain <- toupper(c(\"Arizona\", \"Colorado\", \"Idaho\", \"Montana\", \"Nevada\", \"New Mexico\", \"Utah\", \"Wyoming\"))\n  pacific <- toupper(c(\"Alaska\", \"California\", \"Hawaii\", \"Oregon\", \"Washington\"))\n  \n  # load input data\n  step_6_output <- input_tibble |>\n    # assign divisions\n    mutate(\n      # uppercase everything so it matches the keys\n      area_name_upper = toupper(area_name),\n      # assign divisions \n      division = case_when(\n        area_name %in% new_england ~ \"New England\",\n        area_name %in% middle_atlantic ~ \"Middle Atlantic\",\n        area_name %in% east_north_central ~ \"East North Central\",\n        area_name %in% west_north_central ~ \"West North Central\",\n        area_name %in% south_atlantic ~ \"South Atlantic\",\n        area_name %in% east_south_central ~ \"East South Central\",\n        area_name %in% west_south_central ~ \"West South Central\",\n        area_name %in% mountain ~ \"Mountain\",\n        area_name %in% pacific ~ \"Pacific\",\n        TRUE ~ \"ERROR\"\n    )) |>\n    # get rid of the new upper field\n    select(-area_name_upper)\n    \n  # return output\n  return(step_6_output)\n}\n\n\n\n\n\n# create function to extract year and measurements\nprocess_data_step_4_5_6 <- function(input_tibble){\n  \n  # create county data\n  county_matching <- grep(pattern = \", \\\\w\\\\w\", input_tibble$area_name) \n  county <- input_tibble[county_matching,]\n\n  # create non-county data\n  non_county <- input_tibble[-county_matching,]\n\n  # apply county function\n  county_processed <- process_data_step_5(input_tibble = county)\n  \n  # apply non-county function\n  non_county_processed <- process_data_step_6(input_tibble = non_county)\n  \n  # return new tibbles as a list\n  return(list(county = county_processed, non_county = non_county_processed))\n}\n\n\n\n\n\nprocess_all_data <- function(file_path, input_col = \"enrollment\"){\n  \n  # load data\n  result <- process_data_step_1_2(file_path = file_path, input_col = \"enrollment\") |>\n    # extract year and measurement\n    process_data_step_3() |>\n    # split data, determine state for non-county data, class for county data\n    process_data_step_4_5_6()\n  \n  # return results\n  return(result)\n}\n# call function and output\nEDU01a_part <- process_all_data(file_path = \"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\", input_col = \"enrollment\")\nEDU01b_part <- process_all_data(file_path = \"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\", input_col = \"enrollment\")\n\n\n\n\n\n# create function to combine data\ncombine_processed_data <- function(input_tibble1, input_tibble2){\n  \n  # combine county data\n  combined_county <- bind_rows(input_tibble1$county, input_tibble2$county)\n  \n  # combine non-county data\n  combined_non_county <- bind_rows(input_tibble1$non_county, input_tibble2$non_county)\n  \n  # combine to a list\n  combined_data <- list(county = combined_county, non_county = combined_non_county)\n  \n  # return results\n  return(combined_data)\n}\n\n# call function and combine data\ncombined_processed_data <- combine_processed_data(EDU01a_part, EDU01b_part)\n\n# print results\ncombined_processed_data$county\n\n# A tibble: 62,900 Ã— 7\n   area_name   STCOU enrollment number  year measurement state\n   <chr>       <chr> <chr>       <dbl> <dbl> <chr>       <chr>\n 1 Autauga, AL 01001 EDU010187D   6829  1987 EDU0101     AL   \n 2 Autauga, AL 01001 EDU010188D   6900  1988 EDU0101     AL   \n 3 Autauga, AL 01001 EDU010189D   6920  1989 EDU0101     AL   \n 4 Autauga, AL 01001 EDU010190D   6847  1990 EDU0101     AL   \n 5 Autauga, AL 01001 EDU010191D   7008  1991 EDU0101     AL   \n 6 Autauga, AL 01001 EDU010192D   7137  1992 EDU0101     AL   \n 7 Autauga, AL 01001 EDU010193D   7152  1993 EDU0101     AL   \n 8 Autauga, AL 01001 EDU010194D   7381  1994 EDU0101     AL   \n 9 Autauga, AL 01001 EDU010195D   7568  1995 EDU0101     AL   \n10 Autauga, AL 01001 EDU010196D   7834  1996 EDU0101     AL   \n# â„¹ 62,890 more rows\n\ncombined_processed_data$non_county\n\n# A tibble: 1,060 Ã— 7\n   area_name     STCOU enrollment   number  year measurement division\n   <chr>         <chr> <chr>         <dbl> <dbl> <chr>       <chr>   \n 1 UNITED STATES 00000 EDU010187D 40024299  1987 EDU0101     ERROR   \n 2 UNITED STATES 00000 EDU010188D 39967624  1988 EDU0101     ERROR   \n 3 UNITED STATES 00000 EDU010189D 40317775  1989 EDU0101     ERROR   \n 4 UNITED STATES 00000 EDU010190D 40737600  1990 EDU0101     ERROR   \n 5 UNITED STATES 00000 EDU010191D 41385442  1991 EDU0101     ERROR   \n 6 UNITED STATES 00000 EDU010192D 42088151  1992 EDU0101     ERROR   \n 7 UNITED STATES 00000 EDU010193D 42724710  1993 EDU0101     ERROR   \n 8 UNITED STATES 00000 EDU010194D 43369917  1994 EDU0101     ERROR   \n 9 UNITED STATES 00000 EDU010195D 43993459  1995 EDU0101     ERROR   \n10 UNITED STATES 00000 EDU010196D 44715737  1996 EDU0101     ERROR   \n# â„¹ 1,050 more rows"
  },
  {
    "objectID": "Project_1-Group H.html#writing-a-generic-function-for-summarizing",
    "href": "Project_1-Group H.html#writing-a-generic-function-for-summarizing",
    "title": "Project 1 - Group H",
    "section": "Writing a Generic Function for Summarizing",
    "text": "Writing a Generic Function for Summarizing"
  },
  {
    "objectID": "Project_1-Group H.html#put-together",
    "href": "Project_1-Group H.html#put-together",
    "title": "Project 1 - Group H",
    "section": "Put Together",
    "text": "Put Together"
  }
]